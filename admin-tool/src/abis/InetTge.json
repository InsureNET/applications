{
  "contractName": "InetTge",
  "abi": [
    {
      "anonymous": false,
      "inputs": [],
      "name": "CrowdsaleFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevClosingTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newClosingTime",
          "type": "uint256"
        }
      ],
      "name": "TimedCrowdsaleExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "purchaser",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_allowance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_airdrop",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_bonus",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lockupPeriod",
          "type": "uint256"
        }
      ],
      "name": "Whitelisted",
      "type": "event"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "buyTokens",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "closingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "contributorList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contributionAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokensIssued",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "airdrop",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "bonus",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockupPeriod",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_contributorAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_contributorAllowance",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "_airdrop",
          "type": "bool[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_bonus",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_lockupPeriod",
          "type": "uint256[]"
        }
      ],
      "name": "editContributors",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "finalize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "finalized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "hasClosed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "openingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "wallet",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "weiRaised",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"CrowdsaleFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevClosingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newClosingTime\",\"type\":\"uint256\"}],\"name\":\"TimedCrowdsaleExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_allowance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_airdrop\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lockupPeriod\",\"type\":\"uint256\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributorList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensIssued\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"airdrop\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contributorAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_contributorAllowance\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_airdrop\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bonus\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lockupPeriod\",\"type\":\"uint256[]\"}],\"name\":\"editContributors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"buyTokens(address)\":{\"details\":\"low level token purchase ***DO NOT OVERRIDE*** This function has a non-reentrancy guard, so it shouldn't be called by another `nonReentrant` function.\",\"params\":{\"beneficiary\":\"Recipient of the token purchase\"}},\"closingTime()\":{\"return\":\"the crowdsale closing time.\"},\"finalize()\":{\"details\":\"Must be called after crowdsale ends, to do some extra finalization work. Calls the contract's finalization function.\"},\"finalized()\":{\"return\":\"true if the crowdsale is finalized, false otherwise.\"},\"hasClosed()\":{\"details\":\"Checks whether the period in which the crowdsale is open has already elapsed.\",\"return\":\"Whether crowdsale period has elapsed\"},\"isOpen()\":{\"return\":\"true if the crowdsale is open, false otherwise.\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"openingTime()\":{\"return\":\"the crowdsale opening time.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"rate()\":{\"return\":\"the number of token units a buyer gets per wei.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"token()\":{\"return\":\"the token being sold.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"wallet()\":{\"return\":\"the address where funds are collected.\"},\"weiRaised()\":{\"return\":\"the amount of wei raised.\"}}},\"userdoc\":{\"methods\":{\"editContributors(address[],uint256[],bool[],uint256[],uint256[])\":{\"notice\":\"Push contributor data to the contract before the crowdsale\"}}}},\"settings\":{\"compilationTarget\":{\"/home/jaxcoder/Projects/InetMaster/applications/admin-tool/src/contracts/InetTge.sol\":\"InetTge\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/jaxcoder/Projects/InetMaster/applications/admin-tool/src/contracts/InetTge.sol\":{\"keccak256\":\"0x6a7f46ad68b8df88e01fce319f77a2c2ddf9814cc4947651c1c4fa3f2879a1d2\",\"urls\":[\"bzz-raw://2e711ed31ce5d8349b97d9e2878a7bf61c4c100809044a948f44f2592893a80f\",\"dweb:/ipfs/Qmaz7YiDezdmQQFq1uFqkoALwpkQkoBgSgrHVvp4giNX4d\"]},\"/home/jaxcoder/Projects/InetMaster/applications/admin-tool/src/contracts/InetWhitelistedCrowdsale.sol\":{\"keccak256\":\"0xaa783e81b1b077e9c98f90eb01501e72d3e6f264c845c5e9a155b8fe4823d491\",\"urls\":[\"bzz-raw://5b88d13b40ad3654f74768431ff5670b7083ce35c1eca88cb1a68a695cbbfb8c\",\"dweb:/ipfs/QmTX868bDnsuiDDEuTQM5bPKnxWPYuVjqMpBi9nAwm4Joj\"]},\"/home/jaxcoder/Projects/InetMaster/applications/admin-tool/src/contracts/Token.sol\":{\"keccak256\":\"0x1a078a28fea89db821ec5188d710657cc93a0c596c292e7708d3fff97e724ca2\",\"urls\":[\"bzz-raw://aa07a3875fa64c69bd668a4f70cce4e214d134b12517ecd87f1d0b76928deb0c\",\"dweb:/ipfs/QmbMfhqHWWRusytRd8SYYLquRQ3r3RHHNG5MxGE5JMXYKk\"]},\"@openzeppelin/contracts/GSN/Context.sol\":{\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\",\"urls\":[\"bzz-raw://216ef9d6b614db4eb46970b4e84903f2534a45572dd30a79f0041f1a5830f436\",\"dweb:/ipfs/QmNPrJ4MWKUAWzKXpUqeyKRUfosaoANZAqXgvepdrCwZAG\"]},\"@openzeppelin/contracts/access/Roles.sol\":{\"keccak256\":\"0xb002c378d7b82a101bd659c341518953ca0919d342c0a400196982c0e7e7bcdb\",\"urls\":[\"bzz-raw://00a788c4631466c220b385bdd100c571d24b2deccd657615cfbcef6cadf669a4\",\"dweb:/ipfs/QmTEwDbjJNxmMNCDMqtuou3dyM8Wtp8Q9NFvn7SAVM7Jf3\"]},\"@openzeppelin/contracts/access/roles/MinterRole.sol\":{\"keccak256\":\"0xbe8eef6f2cb4e427f5c5d8a76865ccd06e55a4f1d6671ba312d45bfa705aedbf\",\"urls\":[\"bzz-raw://badf338a5e22c8658c01fe2ce89b487d9dbf6d2d9d5eb49df7415383e2498765\",\"dweb:/ipfs/QmP5aMkvFwMJyuQjKE8ADh5tkWYqonb4KjgkAjgYEVVFAv\"]},\"@openzeppelin/contracts/crowdsale/Crowdsale.sol\":{\"keccak256\":\"0xe612eb8a3023c1a4f4d7e2d0aaf7f19c25e9d772c46a6e95790ddb42ba7baa99\",\"urls\":[\"bzz-raw://8b2bba5f74117ed67570e3b73bbd3ff51153275a0fcefe34df964ccba92ae028\",\"dweb:/ipfs/QmWZF4DnkWZZYzVHz8pAxbLFRxmNiKWE2n1Chd4w2rXWYh\"]},\"@openzeppelin/contracts/crowdsale/distribution/FinalizableCrowdsale.sol\":{\"keccak256\":\"0x22ad427395c439878122cbfbf13e896fd48d1fad0c6fc889a36b4f1bf4743ff4\",\"urls\":[\"bzz-raw://ac3d7abcb3ce59b3993ae46c3237e75fefad636c9befd692bcb5e212a03a7ca7\",\"dweb:/ipfs/QmUur1SjJ4yyRTDELyfMZSqjkgBUjLzK8iRVx8YKuZiciz\"]},\"@openzeppelin/contracts/crowdsale/emission/MintedCrowdsale.sol\":{\"keccak256\":\"0x343249b95ade6a20737b7f681a05a257f14a39b21043ff2e31d8e5d861d83777\",\"urls\":[\"bzz-raw://ace82fde631b4c630223282ec488c53adf0c53beb99a972736dea0a37351d55c\",\"dweb:/ipfs/QmdyGt7hjQ3D6JFr1HRaqa2xjS3EZGFomnwsqfjKHckcqx\"]},\"@openzeppelin/contracts/crowdsale/validation/TimedCrowdsale.sol\":{\"keccak256\":\"0x9407dd37cfed74aa107fd1614c478ba0a2bc3e084e9aa8fbd5a6f316c53aed3b\",\"urls\":[\"bzz-raw://d7d0b156b355c01268a533f127aed64c54f68e1e435efd76dc4ad7dd6138968a\",\"dweb:/ipfs/QmQ6npy1tbtRT6g8NR7gRryu4VYYejVvdnSjgdjG8Z4qAc\"]},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\",\"urls\":[\"bzz-raw://31113152e1ddb78fe7a4197f247591ca894e93f916867beb708d8e747b6cc74f\",\"dweb:/ipfs/QmbZaJyXdpsYGykVhHH9qpVGQg9DGCxE2QufbCUy3daTgq\"]},\"@openzeppelin/contracts/ownership/Ownable.sol\":{\"keccak256\":\"0x6fb9d7889769d7cc161225f9ef7a90e468ba9788b253816f8d8b6894d3472c24\",\"urls\":[\"bzz-raw://cf4c00fc3c37cc5acf0c82ec6fd97bab67d72c2567fdc0ebf023d9c09b30a08e\",\"dweb:/ipfs/Qmb7TChG6DsEDX7LooJ4vmxot19f7VXX8S1zUGPeJTWbwZ\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xb15af804e2bc97db51e4e103f13de9fe13f87e6b835d7a88c897966c0e58506e\",\"urls\":[\"bzz-raw://1e8cff8437557fc915a3bed968fcd8f2df9809599e665ef69c2c9ce628548055\",\"dweb:/ipfs/QmP5spYP8vs2jvLF8zNrXUbqB79hMsoEvMHiLcBxerWKcm\"]},\"@openzeppelin/contracts/token/ERC20/ERC20Mintable.sol\":{\"keccak256\":\"0xa2b957cf89692c504962afb7506999155f83385373f808243246cd5879de5940\",\"urls\":[\"bzz-raw://c44ae0ad1bce141c33b962f8b4e9228bdf8df36c8ac363b4f0bf9498b8bfc32a\",\"dweb:/ipfs/QmcSBRdFwVvy2wFZrBwo5cvqNP4UHh9Eyzf8jnxBgnPqfe\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\",\"urls\":[\"bzz-raw://59fd025151435da35faa8093a5c7a17de02de9d08ad27275c5cdf05050820d91\",\"dweb:/ipfs/QmQMvwEcPhoRXzbXyrdoeRtvLoifUW9Qh7Luho7bmUPRkc\"]},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"keccak256\":\"0x6f2c9955d65c522b80f4b8792f076512d2df947d2112cbc4d98a4781ed42ede2\",\"urls\":[\"bzz-raw://7d8ec81683520c06baeef3f7e06cd82bd6fd5fa611f26857f475f6c829540aff\",\"dweb:/ipfs/QmTDkFzKnrpiV1UKnSoiZAHPuguWzokrr4pFbSPvyaSo56\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11\",\"urls\":[\"bzz-raw://03335b7b07c7c8c8d613cfdd8ec39a0b5ec133ee510bf2fe6cc5a496767bef4b\",\"dweb:/ipfs/Qmebp4nzPja645c9yXSdJkGq96oU3am3LUnG2K3R7XxyKf\"]},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0xb63221b23818d622bfd83d18e0968307e4fcb7a35536bdceded76e1cf8349acd\",\"urls\":[\"bzz-raw://44e1e8c22362c4708a8c3362735f1465f5b05e2f7315e16c7010d694ce019d73\",\"dweb:/ipfs/QmWj9g8X1hxkXRre2kwkEjLBetjuzmSbWHD81bsSojnBkS\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "/**\n * @title iNET Token Generating Event - TGE\n * @notice The Decentralized Insurance Platform Token.\n * @author Jason Romero\n *\n * @copyright 2020 InsureNET\n */\n\npragma solidity ^0.5.0;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Mintable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/crowdsale/distribution/FinalizableCrowdsale.sol\";\nimport \"./Token.sol\";\nimport \"./InetWhitelistedCrowdsale.sol\";\n\n\ncontract InetTge is InetWhitelistedCrowdsale, FinalizableCrowdsale {\n\n  using SafeMath for uint256;\n\n  enum state { preSale, priorityPass, crowdsale, crowdsaleEnded }\n\n//   uint256 public startOpenPreSaleTime;\n//   uint256 public hardCap;\n//   uint256 public lockInTime1; // token lock-in period for team, ECA, US accredited investors\n//   uint256 public lockInTime2; // token lock-in period for founders\n//   state public crowdsaleState = state.preSale;\n\n//   event InetTgeStarted(uint256 _time);\n//   event CrowdsaleStarted(uint256 _time);\n//   event HardCapReached(uint256 _time);\n//   event InetTgeEnded(uint256 _time);\n//   event TokenAllocated(address _beneficiary, uint256 _amount);\n\n//   constructor(\n//     uint256 _startTime,\n//     uint256 _startOpenPreSaleTime,\n//     uint256 _endTime,\n//     uint256 _lockInTime1,\n//     uint256 _lockInTime2,\n//     uint256 _hardCap,\n//     uint256 _rate,\n//     address _wallet\n//   )\n//     Crowdsale(_startTime, _endTime, _rate, _wallet)\n//     public\n//   {\n//     // Check arguments\n//     require(_startTime >= block.timestamp, '');\n//     require(_startOpenPreSaleTime >= _startTime, '');\n//     require(_endTime >= _startOpenPreSaleTime, '');\n//     require(_lockInTime1 >= _endTime, '');\n//     require(_lockInTime2 > _lockInTime1, '');\n//     require(_hardCap > 0, '');\n//     require(_rate > 0, '');\n//     //require(_wallet != 0x0, '');\n\n//     // Set contract fields\n//     startOpenPreSaleTime = _startOpenPreSaleTime;\n//     hardCap = _hardCap;\n//     lockInTime1 = _lockInTime1;\n//     lockInTime2 = _lockInTime2;\n//     //Token(token).pause();\n//   }\n\n//   function setRate(uint256 _rate) public onlyOwner {\n//     require(crowdsaleState == state.preSale, '');\n\n//     rate = _rate;\n//   }\n\n//   function unpauseToken() external onlyOwner{\n//     Token(token).unpause();\n//   }\n\n//   /**\n//    * Calculate the maximum remaining contribution allowed for an address\n//    * @param  _contributor the address of the contributor\n//    * @return maxContribution maximum allowed amount in wei\n//    */\n//   function calculateMaxContribution(address _contributor) public view returns (uint256 _maxContribution) {\n//     uint256 maxContrib = 0;\n\n//     if (crowdsaleState == state.priorityPass) {\n//       maxContrib = contributorList[_contributor].allowance.sub(contributorList[_contributor].contributionAmount);\n\n//       if (maxContrib > hardCap.sub(weiRaised)) {\n//         maxContrib = hardCap.sub(weiRaised);\n//       }\n//     } else if (crowdsaleState == state.crowdsale) {\n//       if (contributorList[_contributor].allowance > 0) {\n//         maxContrib = hardCap.sub(weiRaised);\n//       }\n//     }\n\n//     return maxContrib;\n//   }\n\n//   /**\n//    * Calculate amount of tokens\n//    * This is used twice:\n//    * 1) For calculation of token amount plus optional bonus from wei amount contributed\n//    * In this case, rate is the defined exchange rate of ETH against DIP.\n//    * 2) For calculation of token amount plus optional bonus from DIP token amount\n//    * In the second case, rate == 1 because we have already calculated DIP tokens from RSC amount\n//    * by applying a factor of 10/32.\n//    * @param _contributor the address of the contributor\n//    * @param _amount contribution amount\n//    * @return _tokens amount of tokens\n//    */\n//   function calculateTokens(address _contributor, uint256 _amount, uint256 _rate) public view returns (uint256 _tokens) {\n//     uint256 bonus = contributorList[_contributor].bonus;\n\n//     assert(bonus == 0 || bonus == 4 || bonus == 10);\n\n//     if (bonus > 0) {\n//       _tokens = _amount.add(_amount.div(bonus)).mul(_rate);\n//     } else {\n//       _tokens = _amount.mul(_rate);\n//     }\n//   }\n\n//   /**\n//    * Set the current state of the crowdsale.\n//    */\n//   function setCrowdsaleState() public {\n//     if (weiRaised >= hardCap && crowdsaleState != state.crowdsaleEnded) {\n\n//       crowdsaleState = state.crowdsaleEnded;\n//       emit HardCapReached(block.timestamp);\n//       emit InetTgeEnded(block.timestamp);\n\n//     } else if (\n//       //block.timestamp >= startTime &&\n//       //block.timestamp < startOpenPpTime &&\n//       crowdsaleState != state.priorityPass\n//     ) {\n\n//       crowdsaleState = state.priorityPass;\n//       emit InetTgeStarted(block.timestamp);\n\n//     } else if (\n//       //block.timestamp >= startOpenPpTime &&\n//       //block.timestamp <= endTime &&\n//       crowdsaleState != state.crowdsale\n//     ) {\n\n//       crowdsaleState = state.crowdsale;\n//       emit CrowdsaleStarted(block.timestamp);\n\n//     } else if (\n//       crowdsaleState != state.crowdsaleEnded //&&\n//       //block.timestamp > endTime\n//     ) {\n\n//       crowdsaleState = state.crowdsaleEnded;\n//       emit InetTgeEnded(block.timestamp);\n//     }\n    \n//   }\n\n\n//   /**\n//    * The token buying function.\n//    * @param  _beneficiary  receiver of tokens.\n//    */\n//   function buyTokens(address _beneficiary) public payable {\n//     require(_beneficiary != 0x0, '');\n//     //require(validPurchase(), '');\n//     require(contributorList[_beneficiary].airdrop == false, '');\n\n//     setCrowdsaleState();\n\n//     uint256 weiAmount = msg.value;\n//     uint256 maxContrib = calculateMaxContribution(_beneficiary);\n//     uint256 refund;\n\n//     if (weiAmount > maxContrib) {\n//       refund = weiAmount.sub(maxContrib);\n//       weiAmount = maxContrib;\n//     }\n\n//     // stop here if transaction does not yield tokens\n//     require(weiAmount > 0, '');\n\n//     // calculate token amount to be created\n//     uint256 tokens = calculateTokens(_beneficiary, weiAmount, rate);\n\n//     assert(tokens > 0);\n\n//     // update state\n//     weiRaised = weiRaised.add(weiAmount);\n\n//     require(token.mint(_beneficiary, tokens), '');\n//     emit TokensPurchased(msg.sender, _beneficiary, weiAmount, tokens);\n\n//     contributorList[_beneficiary].contributionAmount = contributorList[_beneficiary].contributionAmount.add(weiAmount);\n//     contributorList[_beneficiary].tokensIssued = contributorList[_beneficiary].tokensIssued.add(tokens);\n\n//     wallet.transfer(weiAmount);\n\n//     if (refund != 0) _beneficiary.transfer(refund);\n//   }\n\n//   /**\n//    * Check if token is locked.\n//    */\n//   function tokenIsLocked(address _contributor) public view returns (bool) {\n\n//     if (block.timestamp < lockInTime1 && contributorList[_contributor].lockupPeriod == 1) {\n//       return true;\n//     } else if (block.timestamp < lockInTime2 && contributorList[_contributor].lockupPeriod == 2) {\n//       return true;\n//     }\n\n//     return false;\n\n//   }\n\n\n//   /**\n//    * Distribute tokens to selected team members & founders.\n//    * Unit of Allowance is ETH and is converted in number of tokens by multiplying with Rate.\n//    * This can be called by any whitelisted beneficiary.\n//    */\n//   function airdrop() public {\n//     airdropFor(msg.sender);\n//   }\n\n\n//   /**\n//    * Alternatively to airdrop(); tokens can be directly sent to beneficiaries by this function\n//    * This can be called only once.\n//    */\n//   function airdropFor(address _beneficiary) public {\n//     require(_beneficiary != 0x0, '');\n//     require(contributorList[_beneficiary].airdrop == true, '');\n//     require(contributorList[_beneficiary].tokensIssued == 0, '');\n//     require(contributorList[_beneficiary].allowance > 0, '');\n\n//     setCrowdsaleState();\n\n//     require(crowdsaleState == state.crowdsaleEnded, '');\n\n//     uint256 amount = contributorList[_beneficiary].allowance.mul(rate);\n//     require(token.mint(_beneficiary, amount), '');\n//     emit TokenAllocated(_beneficiary, amount);\n\n//     contributorList[_beneficiary].tokensIssued = contributorList[_beneficiary].tokensIssued.add(amount);\n//   }\n\n//   /**\n//    * Creates an new ERC20 Token contract for the iNETr Token.\n//    * Overrides Crowdsale function\n//    * @return the created token\n//    */\n//   function createTokenContract() internal returns (ERC20Mintable) {\n//     return new Token();\n//   }\n\n//   /**\n//    * Finalize sale and perform cleanup actions.\n//    */\n//   function finalization() internal {\n//     uint256 maxSupply = Token(token).MAXIMUM_SUPPLY();\n//     token.mint(wallet, maxSupply.sub(token.totalSupply())); // Alternativly, hardcode remaining token distribution.\n//     token.finishMinting();\n//     token.transferOwnership(owner);\n//   }\n\n//   /**\n//    * Owner can transfer back tokens which have been sent to this contract by mistake.\n//    * @param  _token address of token contract of the respective tokens\n//    * @param  _to where to send the tokens\n//    */\n//   function salvageTokens(ERC20 _token, address _to) external onlyOwner {\n//     _token.transfer(_to, _token.balanceOf(this));\n//   }\n}",
  "sourcePath": "/home/jaxcoder/Projects/InetMaster/applications/admin-tool/src/contracts/InetTge.sol",
  "ast": {
    "absolutePath": "/home/jaxcoder/Projects/InetMaster/applications/admin-tool/src/contracts/InetTge.sol",
    "exportedSymbols": {
      "InetTge": [
        326
      ]
    },
    "id": 327,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 307,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "164:23:2"
      },
      {
        "absolutePath": "@openzeppelin/contracts/math/SafeMath.sol",
        "file": "@openzeppelin/contracts/math/SafeMath.sol",
        "id": 308,
        "nodeType": "ImportDirective",
        "scope": 327,
        "sourceUnit": 3327,
        "src": "189:51:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20Mintable.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20Mintable.sol",
        "id": 309,
        "nodeType": "ImportDirective",
        "scope": 327,
        "sourceUnit": 3936,
        "src": "241:63:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "id": 310,
        "nodeType": "ImportDirective",
        "scope": 327,
        "sourceUnit": 3850,
        "src": "305:55:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/crowdsale/distribution/FinalizableCrowdsale.sol",
        "file": "@openzeppelin/contracts/crowdsale/distribution/FinalizableCrowdsale.sol",
        "id": 311,
        "nodeType": "ImportDirective",
        "scope": 327,
        "sourceUnit": 2961,
        "src": "361:81:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/jaxcoder/Projects/InetMaster/applications/admin-tool/src/contracts/Token.sol",
        "file": "./Token.sol",
        "id": 312,
        "nodeType": "ImportDirective",
        "scope": 327,
        "sourceUnit": 1491,
        "src": "443:21:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/jaxcoder/Projects/InetMaster/applications/admin-tool/src/contracts/InetWhitelistedCrowdsale.sol",
        "file": "./InetWhitelistedCrowdsale.sol",
        "id": 313,
        "nodeType": "ImportDirective",
        "scope": 327,
        "sourceUnit": 532,
        "src": "465:40:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 314,
              "name": "InetWhitelistedCrowdsale",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 531,
              "src": "528:24:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_InetWhitelistedCrowdsale_$531",
                "typeString": "contract InetWhitelistedCrowdsale"
              }
            },
            "id": 315,
            "nodeType": "InheritanceSpecifier",
            "src": "528:24:2"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 316,
              "name": "FinalizableCrowdsale",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2960,
              "src": "554:20:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_FinalizableCrowdsale_$2960",
                "typeString": "contract FinalizableCrowdsale"
              }
            },
            "id": 317,
            "nodeType": "InheritanceSpecifier",
            "src": "554:20:2"
          }
        ],
        "contractDependencies": [
          531,
          2435,
          2900,
          2960,
          3139,
          3444,
          4329
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": false,
        "id": 326,
        "linearizedBaseContracts": [
          326,
          2960,
          3139,
          2900,
          4329,
          531,
          3444,
          2435
        ],
        "name": "InetTge",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 320,
            "libraryName": {
              "contractScope": null,
              "id": 318,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3326,
              "src": "586:8:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$3326",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "580:27:2",
            "typeName": {
              "id": 319,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "599:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "canonicalName": "InetTge.state",
            "id": 325,
            "members": [
              {
                "id": 321,
                "name": "preSale",
                "nodeType": "EnumValue",
                "src": "624:7:2"
              },
              {
                "id": 322,
                "name": "priorityPass",
                "nodeType": "EnumValue",
                "src": "633:12:2"
              },
              {
                "id": 323,
                "name": "crowdsale",
                "nodeType": "EnumValue",
                "src": "647:9:2"
              },
              {
                "id": 324,
                "name": "crowdsaleEnded",
                "nodeType": "EnumValue",
                "src": "658:14:2"
              }
            ],
            "name": "state",
            "nodeType": "EnumDefinition",
            "src": "611:63:2"
          }
        ],
        "scope": 327,
        "src": "508:8717:2"
      }
    ],
    "src": "164:9061:2"
  },
  "legacyAST": {
    "absolutePath": "/home/jaxcoder/Projects/InetMaster/applications/admin-tool/src/contracts/InetTge.sol",
    "exportedSymbols": {
      "InetTge": [
        326
      ]
    },
    "id": 327,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 307,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "164:23:2"
      },
      {
        "absolutePath": "@openzeppelin/contracts/math/SafeMath.sol",
        "file": "@openzeppelin/contracts/math/SafeMath.sol",
        "id": 308,
        "nodeType": "ImportDirective",
        "scope": 327,
        "sourceUnit": 3327,
        "src": "189:51:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20Mintable.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20Mintable.sol",
        "id": 309,
        "nodeType": "ImportDirective",
        "scope": 327,
        "sourceUnit": 3936,
        "src": "241:63:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "id": 310,
        "nodeType": "ImportDirective",
        "scope": 327,
        "sourceUnit": 3850,
        "src": "305:55:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/crowdsale/distribution/FinalizableCrowdsale.sol",
        "file": "@openzeppelin/contracts/crowdsale/distribution/FinalizableCrowdsale.sol",
        "id": 311,
        "nodeType": "ImportDirective",
        "scope": 327,
        "sourceUnit": 2961,
        "src": "361:81:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/jaxcoder/Projects/InetMaster/applications/admin-tool/src/contracts/Token.sol",
        "file": "./Token.sol",
        "id": 312,
        "nodeType": "ImportDirective",
        "scope": 327,
        "sourceUnit": 1491,
        "src": "443:21:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/jaxcoder/Projects/InetMaster/applications/admin-tool/src/contracts/InetWhitelistedCrowdsale.sol",
        "file": "./InetWhitelistedCrowdsale.sol",
        "id": 313,
        "nodeType": "ImportDirective",
        "scope": 327,
        "sourceUnit": 532,
        "src": "465:40:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 314,
              "name": "InetWhitelistedCrowdsale",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 531,
              "src": "528:24:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_InetWhitelistedCrowdsale_$531",
                "typeString": "contract InetWhitelistedCrowdsale"
              }
            },
            "id": 315,
            "nodeType": "InheritanceSpecifier",
            "src": "528:24:2"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 316,
              "name": "FinalizableCrowdsale",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2960,
              "src": "554:20:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_FinalizableCrowdsale_$2960",
                "typeString": "contract FinalizableCrowdsale"
              }
            },
            "id": 317,
            "nodeType": "InheritanceSpecifier",
            "src": "554:20:2"
          }
        ],
        "contractDependencies": [
          531,
          2435,
          2900,
          2960,
          3139,
          3444,
          4329
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": false,
        "id": 326,
        "linearizedBaseContracts": [
          326,
          2960,
          3139,
          2900,
          4329,
          531,
          3444,
          2435
        ],
        "name": "InetTge",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 320,
            "libraryName": {
              "contractScope": null,
              "id": 318,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3326,
              "src": "586:8:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$3326",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "580:27:2",
            "typeName": {
              "id": 319,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "599:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "canonicalName": "InetTge.state",
            "id": 325,
            "members": [
              {
                "id": 321,
                "name": "preSale",
                "nodeType": "EnumValue",
                "src": "624:7:2"
              },
              {
                "id": 322,
                "name": "priorityPass",
                "nodeType": "EnumValue",
                "src": "633:12:2"
              },
              {
                "id": 323,
                "name": "crowdsale",
                "nodeType": "EnumValue",
                "src": "647:9:2"
              },
              {
                "id": 324,
                "name": "crowdsaleEnded",
                "nodeType": "EnumValue",
                "src": "658:14:2"
              }
            ],
            "name": "state",
            "nodeType": "EnumDefinition",
            "src": "611:63:2"
          }
        ],
        "scope": 327,
        "src": "508:8717:2"
      }
    ],
    "src": "164:9061:2"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.16+commit.9c3226ce.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.23",
  "updatedAt": "2020-03-31T02:29:29.166Z",
  "devdoc": {
    "methods": {
      "buyTokens(address)": {
        "details": "low level token purchase ***DO NOT OVERRIDE*** This function has a non-reentrancy guard, so it shouldn't be called by another `nonReentrant` function.",
        "params": {
          "beneficiary": "Recipient of the token purchase"
        }
      },
      "closingTime()": {
        "return": "the crowdsale closing time."
      },
      "finalize()": {
        "details": "Must be called after crowdsale ends, to do some extra finalization work. Calls the contract's finalization function."
      },
      "finalized()": {
        "return": "true if the crowdsale is finalized, false otherwise."
      },
      "hasClosed()": {
        "details": "Checks whether the period in which the crowdsale is open has already elapsed.",
        "return": "Whether crowdsale period has elapsed"
      },
      "isOpen()": {
        "return": "true if the crowdsale is open, false otherwise."
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "openingTime()": {
        "return": "the crowdsale opening time."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "rate()": {
        "return": "the number of token units a buyer gets per wei."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "token()": {
        "return": "the token being sold."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "wallet()": {
        "return": "the address where funds are collected."
      },
      "weiRaised()": {
        "return": "the amount of wei raised."
      }
    }
  },
  "userdoc": {
    "methods": {
      "editContributors(address[],uint256[],bool[],uint256[],uint256[])": {
        "notice": "Push contributor data to the contract before the crowdsale"
      }
    }
  }
}